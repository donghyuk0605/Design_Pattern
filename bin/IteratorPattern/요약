이터리이터 페턴: 배열의 for문을 통해 배열요소에서 i의 기능을 추상화한것이 Iterator pattern
※내부의 구현의 노출하지 않고 순차적으로 접근 가능

예시 : 축구선수의 이적시장을 통해 이적시장 목록에 넣고 삭제 하는 것을 예시로 함

인터페이스: interator // Iterator역활을 하는 인터페이스

인터페이스: Aggregate // Iterator생성하는 인터페이스

메인클래스:IteratorMain //

클래스: SoccerPlayer // 축구선수 정보를 저장하는 클래스
SoccerPlayer() //받아온값으로 변수 값을 초기화하기 위한 생성자
String getName() // 축구선수 이름을 가져오기위한 getter
getCost() // 축구선수 몸값을 가져오기 위한 getter

클래스 : TransferMarketList <-Aggregate // Aggregate 구현을 실질적인 연산을 하는 클래스
함수:
TransferMarketList() <- Iterator // 트랜스퍼마켓의 베열의 크기를 지정하는 생성자
addSoccerPlayer() // SoccerPlayer 객체의 매개 변수를 받아 입력값을 넣은 함수 
getLength() // 랭스의 크기
removeSoccerPlayer() // 사커플레이어 리셋은반영하기위한 클래스 

클래스 : TransferMarketListIterator 이터레이터 역활을 하는 클래스
함수:
TransferMarketListIterator()//TransferMarketListIterator인덱스를 초기화 시키는 생성자
hasNext() // 다음 요소의 존재 유무 확인
next() // 다음 오브젝트 값을 가져오는 함수
remove() // 값을 삭제하는 함수 이전의 값을 앞에 배열에 옴기고 배열 사이즈를 줄이는 원리